<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Geralt of HTML</title>
    <style>
        .form {
            position: absolute;
            left: 100px;
        }
    </style>
</head>
<body>
    <form name="my">
        
        <div class="form"><span>Number of rows:  </span><input type="number" value="50" name="rows"></div><br><br>
        <div class="form"><span>Number of columns:  </span><input type="number" value="50" name="columns"></div><br><br>
        <div class="form"><span>Number of herbivores:  </span><input type="number" value="1000" name="herbs"></div><br><br>
        <div class="form"><span>Number of predators:  </span><input type="number" value="40" name="preds"></div><br><br>
        <div class="form"><span>Herbivores lifespan:  </span><input type="number" value="5" name="hLife"></div><br><br>
        <div class="form"><span>Predators lifespan:  </span><input type="number" value="5" name="pLife"></div><br><br>
        <div class="form"><span>Herbivores birth rate:  </span><input type="number" value="3" name="hBirth"></div><br><br>
        <div class="form"><span>Predators birth rate:  </span><input type="number" value="3" name="pBirth"></div><br><br>
        <div class="form"><span>Predators starvation death:  </span><input type="number" value="2" name="starve"></div><br><br>
        <input type="button" value="Render" onclick="renderScene()">
        <br>
    </form>
    <script>
        var max, final;
        var dots = [];
        var rows, cols;
        var canvas = document.createElement('canvas');
        var context = canvas.getContext('2d');
        function renderScene(){
            dots = [];
            rows = parseInt(document.forms.my.elements.rows.value);
            cols = parseInt(document.forms.my.elements.columns.value);
            context.clearRect(0, 0, canvas.width, canvas.height);
            let board = document.getElementById('board');
            canvas.width = cols * 10 + 1;
            canvas.height = rows * 10 + 1;
            canvas.style.width = String(canvas.width)+'px';
            canvas.style.height = String(canvas.height)+'px';
            canvas.style.marginLeft = '20px';
            canvas.style.marginTop = '6px';
            context.lineWidth = 0.5;
            context.fillStyle = 'silver';
            context.rect(0.5, 0.5, cols * 10, rows * 10);
            context.fill();
            for (var i = 0; i < rows; ++i){
                var r = [];
                context.moveTo(0.5, i * 10 + 0.5);
                context.lineTo(cols * 10 + 0.5, i * 10 + 0.5);
                for (var j = 0; j < cols; ++j){
                    r.push({class:'empty', i:i, j:j, moved:false});
                }
                dots.push(r);
            }
            for (var i = 0; i < cols; ++i){
                context.moveTo(i * 10 + 0.5, 0.5);
                context.lineTo(i * 10 + 0.5, rows * 10 + 0.5);
            }
            context.stroke();
            context.closePath();
            if(!board){
                var placeBtn = document.createElement('input');
                var startBtn = document.createElement('input');
                placeBtn.type = 'button';
                startBtn.type = 'button';
                placeBtn.value = 'Place animals';
                startBtn.value = 'Start';
                placeBtn.style.position = 'relative';
                placeBtn.style.left = String(cols / 2 * 10 - 70) + 'px';
                startBtn.style.position = 'relative';
                startBtn.style.left = String(cols / 2 * 10 - 55) + 'px';
                var div = document.createElement('div');
                div.id = 'board';
                var br = document.createElement('br');
                placeBtn.setAttribute('onclick','placeAnimals(document.forms.my.elements.herbs.value, document.forms.my.elements.preds.value)');
                startBtn.setAttribute('onclick','startLife()');
                div.appendChild(placeBtn);
                div.appendChild(startBtn);
                div.appendChild(br);
                div.appendChild(canvas);
                document.body.appendChild(div);
            }
        }
        renderScene();
        function placeAnimals(herbs, preds){
            herbs = parseInt(herbs);
            preds = parseInt(preds);
            if (herbs + preds > cols * rows){
                alert('Error: area overpopulated');
            }
            else{
                var hLife = parseInt(document.forms.my.elements.hLife.value);
                var pLife = parseInt(document.forms.my.elements.pLife.value);
                var hBirth = parseInt(document.forms.my.elements.hBirth.value);
                var pBirth = parseInt(document.forms.my.elements.pBirth.value);
                var starve = parseInt(document.forms.my.elements.starve.value);
                renderScene(rows, cols);
                
                holder = JSON.parse(JSON.stringify(dots));
                var x, y, i, j;
                h = herbs;
                p = preds;
                while (h > 0){
                    --h;
                    x = Math.floor(Math.random() * holder.length);
                    y = Math.floor(Math.random() * holder[x].length);
                    i = holder[x][y].i;
                    j = holder[x][y].j;
                    dots[i][j].class = 'herbivore';
                    dots[i][j].life = hLife;
                    dots[i][j].birth = hBirth;
                    holder[x].splice(y, 1);
                    if (holder[x].length == 0){holder.splice(x, 1)}
                    context.beginPath();
                    context.rect(j * 10 + 1, i * 10 + 1, 9, 9);
                    context.fillStyle = 'green';
                    context.fill();
                    context.closePath();
                }
                
                context.closePath();
                context.beginPath();
                while (p > 0){
                    --p;
                    x = Math.floor(Math.random() * holder.length);
                    y = Math.floor(Math.random() * holder[x].length);
                    i = holder[x][y].i;
                    j = holder[x][y].j;
                    dots[i][j].class = 'predator';
                    holder[x].splice(y, 1);
                    if (holder[x].length == 0){holder.splice(x, 1)}
                    context.beginPath();
                    context.rect(j * 10 + 1, i * 10 + 1, 9, 9);
                    context.fillStyle = 'red';
                    context.fill();
                    context.closePath();
                }
            }
        }
        function startLife(){
            setInterval(function(){
                for (let i = 0; i < rows; ++i){
                    for (let j = 0; j < cols; ++j){
                        if (!dots[i][j].moved){
                            if (dots[i][j].class == 'predator'){
                                var eatables = [];
                                var empties = [];
                                for (let k = 0; k < 3; ++k){
                                    for (let t = 0; t < 3; ++t){
                                        if (k == 1 && t == 1){continue}
                                        let x, y;
                                        x = i + k - 1;
                                        if (x < 0){x = rows + x}
                                        if (x > rows - 1){x = x - rows}
                                        y = j + t - 1;
                                        if (y < 0){y = cols + y}
                                        if (y > cols - 1){y = y - cols}
                                        //console.log(String(x)+' '+String(y));
                                        if (dots[x][y].class == 'herbivore'){eatables.push(dots[x][y])}
                                        if (dots[x][y].class == 'empty'){empties.push(dots[x][y])}
                                    }
                                }
                                if (eatables.length > 0){
                                    var n = Math.floor(Math.random() * eatables.length);
                                    dots[eatables[n].i][eatables[n].j].moved = true;
                                    dots[eatables[n].i][eatables[n].j].class = 'predator';
                                    dots[i][j].class = 'empty';
                                    context.beginPath();
                                    context.rect(eatables[n].j * 10 + 0.5, eatables[n].i * 10 + 0.5, 9, 9);
                                    context.fillStyle = 'red';
                                    context.fill();
                                    context.stroke();
                                    context.closePath();
                                    context.beginPath();
                                    context.rect(j * 10 + 0.5, i * 10 + 0.5, 9, 9);
                                    context.fillStyle = 'silver';
                                    context.fill();
                                    context.stroke();
                                    context.closePath();
                                }
                                else {
                                    if (empties.length > 0){
                                        var n;
                                        var targetFound = false;
                                        var m = 0;
                                        max = 0;
                                        final = false;
                                        for (let c = 0; c < empties.length; ++c){
                                            var res = scan(empties[c].i, empties[c].j, 5);
                                            if (res != false && res > m){
                                                m = res;
                                                n = c;
                                                targetFound = true;
                                            }
                                        }                                        
                                        if (!targetFound){n = Math.floor(Math.random() * empties.length);}
                                        dots[empties[n].i][empties[n].j].moved = true;
                                        dots[empties[n].i][empties[n].j].class = 'predator';
                                        dots[i][j].class = 'empty';
                                        context.beginPath();
                                        context.rect(empties[n].j * 10 + 0.5, empties[n].i * 10 + 0.5, 9, 9);
                                        context.fillStyle = 'red';
                                        context.fill();
                                        context.stroke();
                                        context.closePath();
                                        context.beginPath();
                                        context.rect(j * 10 + 0.5, i * 10 + 0.5, 9, 9);
                                        context.fillStyle = 'silver';
                                        context.fill();
                                        context.stroke();
                                        context.closePath();
                                    }
                                }
                            }
                        }
                    }
                }
                for (let i = 0; i < rows; ++i){
                    for (let j = 0; j < cols; ++j){
                        dots[i][j].moved = false;
                    }
                }
                context.closePath();
            }, 1000);
        }
        function scan(i, j, range){
            if (range > 0){
                for (let k = 0; k < 3; ++k){
                    for (let t = 0; t < 3; ++t){
                        if (k == 1 && t == 1){continue}
                        var x = i + k - 1;
                        if (x < 0){x = rows + x}
                        if (x > rows - 1){x = x - rows}
                        var y = j + t - 1;
                        if (y < 0){y = cols + y}
                        if (y > cols - 1){y = y - cols}
                        if (dots[x][y].class == 'herbivore'){if (range > max){final = range; max = range;}}
                        else{
                            scan(x, y, range - 1);
                        }
                    }
                }
                return final;
            }
            else{return false}
        }
    </script>
</body>
</html>
